package de.greenrobot.daoexample;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig commentToMeDaoConfig;
    private final DaoConfig replyToMeDaoConfig;
    private final DaoConfig recordDaoConfig;
    private final CommentToMeDao commentToMeDao;
    private final ReplyToMeDao replyToMeDao;
   private final  RecordDao recordDao;
    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        commentToMeDaoConfig = daoConfigMap.get(CommentToMeDao.class).clone();
        commentToMeDaoConfig.initIdentityScope(type);

        replyToMeDaoConfig = daoConfigMap.get(ReplyToMeDao.class).clone();
        replyToMeDaoConfig.initIdentityScope(type);

        recordDaoConfig=daoConfigMap.get(RecordDao.class).clone();
        recordDaoConfig.initIdentityScope(type);

        commentToMeDao = new CommentToMeDao(commentToMeDaoConfig, this);
        replyToMeDao = new ReplyToMeDao(replyToMeDaoConfig, this);
        recordDao=new RecordDao(recordDaoConfig,this);
        registerDao(CommentToMe.class, commentToMeDao);
        registerDao(ReplyToMe.class, replyToMeDao);
        registerDao(Record.class,recordDao);
    }
    
    public void clear() {
        commentToMeDaoConfig.getIdentityScope().clear();
        replyToMeDaoConfig.getIdentityScope().clear();
        recordDaoConfig.getIdentityScope().clear();
    }

    public CommentToMeDao getCommentToMeDao() {
        return commentToMeDao;
    }

    public ReplyToMeDao getReplyToMeDao() {
        return replyToMeDao;
    }

    public RecordDao getRecordDao() {
        return recordDao;
    }
}
